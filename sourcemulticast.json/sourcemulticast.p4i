# 1 "sourcemulticast.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "sourcemulticast.p4"
# 1 "/usr/local/share/p4c/p4include/core.p4" 1
# 23 "/usr/local/share/p4c/p4include/core.p4"
error {
    NoError,
    PacketTooShort,
    NoMatch,
    StackOutOfBounds,
    HeaderTooShort,
    ParserTimeout
}

extern packet_in {



    void extract<T>(out T hdr);




    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);



    T lookahead<T>();

    void advance(in bit<32> sizeInBits);


    bit<32> length();
}

extern packet_out {



    void emit<T>(in T hdr);
}




extern void verify(in bool check, in error toSignal);


@name("NoAction")
action NoAction() {}




match_kind {

    exact,

    ternary,

    lpm
}
# 2 "sourcemulticast.p4" 2
# 1 "/usr/local/share/p4c/p4include/v1model.p4" 1
# 22 "/usr/local/share/p4c/p4include/v1model.p4"
# 1 "/usr/local/share/p4c/p4include/core.p4" 1
# 23 "/usr/local/share/p4c/p4include/v1model.p4" 2

match_kind {
    range,

    selector
}


@metadata @name("standard_metadata")
struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> clone_spec;
    bit<32> instance_type;
    bit<1> drop;
    bit<16> recirculate_port;
    bit<32> packet_length;
# 50 "/usr/local/share/p4c/p4include/v1model.p4"
    @alias("queueing_metadata.enq_timestamp") bit<32> enq_timestamp;
    @alias("queueing_metadata.enq_qdepth") bit<19> enq_qdepth;
    @alias("queueing_metadata.deq_timedelta") bit<32> deq_timedelta;
    @alias("queueing_metadata.deq_qdepth") bit<19> deq_qdepth;

    @alias("intrinsic_metadata.ingress_global_timestamp") bit<48> ingress_global_timestamp;
    @alias("intrinsic_metadata.lf_field_list") bit<32> lf_field_list;
    @alias("intrinsic_metadata.mcast_grp") bit<16> mcast_grp;
    @alias("intrinsic_metadata.resubmit_flag") bit<1> resubmit_flag;
    @alias("intrinsic_metadata.egress_rid") bit<16> egress_rid;

    bit<1> checksum_error;
}

enum CounterType {
    packets,
    bytes,
    packets_and_bytes
}

enum MeterType {
    packets,
    bytes
}

extern counter {
    counter(bit<32> size, CounterType type);
    void count(in bit<32> index);
}

extern direct_counter {
    direct_counter(CounterType type);
    void count();
}

extern meter {
    meter(bit<32> size, MeterType type);
    void execute_meter<T>(in bit<32> index, out T result);
}

extern direct_meter<T> {
    direct_meter(MeterType type);
    void read(out T result);
}

extern register<T> {
    register(bit<32> size);
    void read(out T result, in bit<32> index);
    void write(in bit<32> index, in T value);
}


extern action_profile {
    action_profile(bit<32> size);
}


extern void random(out bit<32> result, in bit<32> lo, in bit<32> hi);


extern void digest<T>(in bit<32> receiver, in T data);

enum HashAlgorithm {
    crc32,
    crc32_custom,
    crc16,
    crc16_custom,
    random,
    identity,
    csum16,
    xor16
}

extern void mark_to_drop();
extern void hash<O, T, D, M>(out O result, in HashAlgorithm algo, in T base, in D data, in M max);

extern action_selector {
    action_selector(HashAlgorithm algorithm, bit<32> size, bit<32> outputWidth);
}

enum CloneType {
    I2E,
    E2E
}

@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
    Checksum16();
    bit<16> get<D>(in D data);
}
# 154 "/usr/local/share/p4c/p4include/v1model.p4"
extern void verify_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
# 166 "/usr/local/share/p4c/p4include/v1model.p4"
extern void update_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

extern void resubmit<T>(in T data);
extern void recirculate<T>(in T data);
extern void clone(in CloneType type, in bit<32> session);
extern void clone3<T>(in CloneType type, in bit<32> session, in T data);

extern void truncate(in bit<32> length);




extern value_set<D> {
    value_set(bit<8> size);
    bool is_member(in D data);
}







parser Parser<H, M>(packet_in b,
                    out H parsedHdr,
                    inout M meta,
inout standard_metadata_t standard_metadata);




control VerifyChecksum<H, M>(inout H hdr,
                             inout M meta);
@pipeline
control Ingress<H, M>(inout H hdr,
                      inout M meta,
                      inout standard_metadata_t standard_metadata);
@pipeline
control Egress<H, M>(inout H hdr,
                     inout M meta,
                     inout standard_metadata_t standard_metadata);




control ComputeChecksum<H, M>(inout H hdr,
                              inout M meta);
@deparser
control Deparser<H>(packet_out b,in H hdr);

package V1Switch<H, M>(Parser<H, M> p,
                       VerifyChecksum<H, M> vr,
                       Ingress<H, M> ig,
                       Egress<H, M> eg,
                       ComputeChecksum<H, M> ck,
                       Deparser<H> dep
                       );
# 3 "sourcemulticast.p4" 2

struct intrinsic_metadata_t {
    bit<4> mcast_grp;
    bit<4> egress_rid;
    bit<16> mcast_hash;
    bit<32> lf_field_list;
    bit<16> resubmit_flag;
}

typedef bit<48> EthernetAddress;
typedef bit<32> IPv4Address;
typedef bit<128> IPv6Address;

header Ethernet_h {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16> ethernetType;
}


header IPv4_h {
    bit<4> version;
    bit<4> ihl;
    bit<8> diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3> flags;
    bit<13> fragOffset;
    bit<8> ttl;
    bit<8> protocol;
    bit<16> hdrChecksum;
    IPv4Address srcAddr;
    IPv4Address dstAddr;

}

header IPv6_h {
    bit<4> version;
    bit<8> class;
    bit<20> flowlabel;
    bit<16> payloadlength;
    bit<8> nextheader;
    bit<8> hoplimit;
    IPv6Address srcAddr;
    IPv6Address dstAddr;
}

header Srh_h {
    bit<8> nextheader;
    bit<8> hdrextlen;
    bit<8> routingtype;
    bit<8> segmentleft;
    bit<8> lastentry;
    bit<8> flags;
    bit<16> tag;
}

header SMI_h {
    bit<128> smidentifier;
}

header SMS_h {
    bit<128> smstart;
}

header BR_h {
    bit<128> brbitstring;
}

header MS_h {
    bit<128> msheader;
}

header AL_h {
    bit<128> alheader_ab;
    bit<128> alheader;
}

header Address_h {
    bit<128> address1;
    bit<128> address2;
}







struct headers {
    Ethernet_h ethernet;
    IPv6_h ipv6;
    Srh_h srh;
    Address_h addresslist;
    AL_h alh;
    MS_h msh;
    SMI_h smih;
    BR_h brh;
    SMS_h smsh;

}


struct mystruct_idx {
    bit<32> idx;
}


struct metadata {
    mystruct_idx mystruct1;
}

typedef tuple<bit<4>, bit<4>, bit<8>, varbit<56>> myTuple1;


error {
    Ipv4ChecksumError
}


parser sm_Parser(packet_in pkt, out headers hdr,
                    inout metadata meta, inout standard_metadata_t stdmeta)
{
    state start {
        pkt.extract(hdr.ethernet);
        transition select(hdr.ethernet.ethernetType) {
            0x86dd : parse_ipv6;
            default : accept;
        }
    }

    state parse_ipv6 {
        pkt.extract(hdr.ipv6);
        transition select(hdr.ipv6.nextheader) {
            43 : parse_srh;
            default : accept;
        }
    }

    state parse_srh {
        pkt.extract(hdr.srh);
        transition parse_addresslist;
    }

    state parse_addresslist {
        pkt.extract(hdr.addresslist);
        transition parse_alh;
    }

    state parse_alh {
        pkt.extract(hdr.alh);
        transition parse_msh;
    }

    state parse_msh {
        pkt.extract(hdr.msh);
        transition parse_smih;
    }

    state parse_smih {
        pkt.extract(hdr.smih);
        transition accept;
    }

    state parse_smsh {
        pkt.extract(hdr.smsh);
        transition accept;
    }

}

control sm_Ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta)
{

    register<bit<128>>(2) scr_statustuple1;
    register<bit<64>>(1) scr_statustuple2;

    action calculate_vm() {

        bit<32> random1;
        bit<32> random2;
        random(random1, 1, 4200000000);
        random(random2, 1, 4200000000);

        scr_statustuple2.write(0,random1++random2);
        hdr.msh.msheader = hdr.msh.msheader[127:96] ++ random1 ++ random2 ++ hdr.msh.msheader[31:0];
    }
    action forward(bit<9> port) {
        stdmeta.egress_spec = port;
    }

    action tuple1_save(bit<128> bitstring) {
        scr_statustuple1.write(0,hdr.smih.smidentifier);


        scr_statustuple1.write(1,bitstring);
    }

    action write_bitstring() {
        hdr.brh.setValid();
        scr_statustuple1.read(hdr.brh.brbitstring, 1);
        hdr.ipv6.payloadlength = hdr.ipv6.payloadlength + 16;
        hdr.srh.lastentry = hdr.srh.lastentry + 1;
    }

    action read_write_vm() {
        bit<64> temp;
        scr_statustuple2.read(temp, 0);
        hdr.msh.msheader = hdr.msh.msheader[127:96] ++ temp ++ hdr.msh.msheader[31:0];
    }

    action set_group(bit<16> group) {
        stdmeta.mcast_grp = group;
    }

    table match_inport {
        key = {
            stdmeta.ingress_port : exact;
        }
        actions = {forward;}
    }

    table match_ipv6 {
        key = {
            hdr.ipv6.dstAddr : lpm;
        }
        actions = {forward;}
    }

    table generate_vm {
        actions = {calculate_vm;}
    }

    table save_sid {
        actions = {tuple1_save;}
    }

    table insert_bit {
        actions = {write_bitstring;}
    }

    table insert_vm {
        actions = {read_write_vm;}
    }

    table replicate {
        key = {
            hdr.smih.smidentifier : exact;
        }
        actions = {set_group;}
    }
# 271 "sourcemulticast.p4"
    apply {
        generate_vm.apply();
        save_sid.apply();
        insert_bit.apply();
        match_inport.apply();
        match_ipv6.apply();
    }
# 301 "sourcemulticast.p4"
}



control sm_Egress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta)
{

    action write_rgt() {
        bit<16> buf = 0;

        hdr.ethernet.srcAddr = buf ++ stdmeta.deq_timedelta;


    }

    action d_fibs_action_1() {
        hdr.ipv6.dstAddr = hdr.addresslist.address2;
        hdr.srh.setInvalid();
        hdr.addresslist.setInvalid();
        hdr.alh.setInvalid();
        hdr.msh.setInvalid();
        hdr.smih.setInvalid();
        hdr.smsh.setInvalid();

    }

    action d_fibs_action_2() {
        hdr.ipv6.dstAddr = hdr.addresslist.address1;
        hdr.srh.setInvalid();
        hdr.addresslist.setInvalid();
        hdr.alh.setInvalid();
        hdr.msh.setInvalid();
        hdr.smih.setInvalid();
        hdr.smsh.setInvalid();
    }

    table D_FIBs_port1 {
        key = {
            stdmeta.egress_port : exact;
        }
        actions = {d_fibs_action_1;}
    }

    table D_FIBs_port2 {
        key = {
            stdmeta.egress_port : exact;
        }
        actions = {d_fibs_action_2;}
    }

    table write_time {
        actions = {write_rgt;}
    }

    apply {





        write_time.apply();
    }

}


control sm_VerifyChecksum(inout headers hdr, inout metadata meta) {
    apply {
# 382 "sourcemulticast.p4"
    }
}

control sm_UpdateChecksum(inout headers hdr, inout metadata meta) {
    apply {
# 400 "sourcemulticast.p4"
    }
}

control sm_Deparser(packet_out packet, in headers hdr) {

    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ipv6);
        packet.emit(hdr.srh);
        packet.emit(hdr.addresslist);
        packet.emit(hdr.alh);
        packet.emit(hdr.msh);
        packet.emit(hdr.brh);
        packet.emit(hdr.smih);
        packet.emit(hdr.smsh);

    }

}

V1Switch<headers, metadata>(sm_Parser(), sm_VerifyChecksum(), sm_Ingress(), sm_Egress(), sm_UpdateChecksum(),sm_Deparser()) main;
